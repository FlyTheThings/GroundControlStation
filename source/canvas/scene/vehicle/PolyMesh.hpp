#pragma once


#pragma pack(push, 1)
struct PolyMeshVertex {
    GLfloat position[3];   ///< 3D position vector.
    GLfloat normal[3];     ///< 3D normal vector.
    GLfloat color[3];      ///< 3D color vector (R, G, B).
};
#pragma pack(pop)


class PolyMesh {
    public:
        /**
         *  @brief Create a polymesh object.
         */
        PolyMesh();

        /**
         *  @brief Read vertex data from ply file.
         *  @param [in] filename Filename of the ply file.
         *  @param [out] err String where to store error information.
         *  @return True if success, false otherwise.
         */
        bool Read(std::string filename, std::string& err);

        /**
         *  \brief Generate or regenerate all GL content (vao, vbo, ebo).
         *  \details The thread calling this function needs the GL-context.
         */
        void GenerateGL(void);

        /**
         *  \brief Delete all GL content that was generated by the \ref GenerateGL member function.
         *  \details The thread calling this function needs the GL-context.
         */
        void DeleteGL(void);

        /**
         *  \brief Draw all triangles of the mesh.
         */
        void DrawTriangles(void);

    private:
        GLuint vao;                             ///< The vertex array object.
        GLuint vbo;                             ///< The vertex buffer object.
        GLuint ebo;                             ///< The element buffer object.
        std::vector<PolyMeshVertex> vertices;   ///< List of vertices for this mesh.
        std::vector<GLuint> indices;            ///< List of indices to vertices that describe triangles of the mesh.
};

