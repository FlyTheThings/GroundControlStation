#pragma once


#include <RD.hpp>
#include <AxisAlignedBoundingBox.hpp>


// The vertex structure
#pragma pack(push, 1)
typedef struct {
    GLfloat position[3];
    GLfloat normal[3];
    GLfloat color[3];
} PolytopeVertex;
#pragma pack(pop)


class Polytope {
    public:
        GLenum primitives;                     ///< Specifies what kind of primitives to render, defaults to GL_POINTS.
        std::vector<GLuint> indices;           ///< Container of indices.
        std::vector<PolytopeVertex> vertices;  ///< Container of vertices.
        AxisAlignedBoundingBox aabb;           ///< The axis aligned bounding box. Call @ref UpdateAABB to calculate the AABB based on the current @ref vertices.

        /**
         *  @brief Create a polytope.
         */
        Polytope();

        /**
         *  @brief Default copy constructor.
         */
        Polytope(const Polytope& p) = default;

        /**
         *  @brief Delete the polytope.
         */
        ~Polytope();

        /**
         *  @brief Update the AABB based on the current vertex data.
         */
        void UpdateAABB(void);

        /**
         *  @brief Generate all GL content (vao, vbo, ebo).
         *  @details The thread calling this function needs the GL-context. This member function will return if the GL content has
         *  already been created.
         */
        void GenerateGL(void);

        /**
         *  @brief Delete all GL content that was generated by the @ref GenerateGL member function.
         */
        void DeleteGL(void);

        /**
         *  @brief Draw the primitives.
         */
        void Draw(void);

        /* Operators */
        Polytope& operator=(const Polytope& rhs);

    private:
        GLuint vao;  ///< The vertex array object.
        GLuint vbo;  ///< The vertex buffer object.
        GLuint ebo;  ///< The element buffer object.
};

